/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a given AHU, scan all zones served by the AHU for appropriate points the
  reset is based on, load recent trends (past 3h, adjustable) for each, and 
  determine for each zone whether the zone is generating a request.
  Return total number of requests.
  
  Arguments: 
  ahuRef       Id of an ahu equip
  ptTags       Str, tags of zone points to query for request generation
  hystTime     Time, hysteresis of the request generation
  offlineTime  Time, allowed gap between latest data point and now(), zone
               doesn't count if it's considered offline
  ignoresEn    Bool, if true, check if generated requests should be ignored
------------------------------------------------------------------------------*/
(ahuRef:@p:lbnl:r:22dc02cf-fb26e410, ptTags: "cool and pid and cmd",
 hystTime: 3hr, offlineTime: 30min, ignoresEn:true) => do
  // Normalization
  ahuId: if (isRef(ahuRef)) ahuRef else ahuRef->id
  ahu: readById(ahuId)

  // Initialize requests
  requests: 0
  ignores: 0
  reportingZones: 0

  // Determine tags for requests point and ignore function
  if (ptTags=="cool and pid and cmd") do
    reqPtTags: "point and cool and air and request and cmd and not connRef"
    zoneReqIgnoreFunc: facZoneClgReqIgnoresNow
  end else if (ptTags=="heat and valve and cmd") do
    reqPtTags: "point and heat and air and request and cmd and not connRef"
    zoneReqIgnoreFunc: facZoneHtgReqIgnoresNow
  end else if (ptTags=="damper and cmd") do
    reqPtTags: "point and pressure and air and request and cmd and not connRef"
    zoneReqIgnoreFunc: null
  end else do
    reqPtTags: null
    zoneReqIgnoreFunc: null
  end

  // Find all points using ptTags for terminal units served by AHU
  zoneOutputs: readAll(parseFilter(ptTags+" and equipRef->ahuRef==@"+ahuId))

  // Loop through outputs and calculate request for each
  zoneOutputs.each((rec,index) => do
    his: rec.hisRead(now()-hystTime..now())
    // If latest datapoint is too old, skip zone
    if (isEmpty(his.findAll(r => r->ts > now()-offlineTime)))
      return null
    
    // Else determine if a request is generated
    else do
      zoneReq: his.foldCol("v0",foldRequest)
      if (isNumber(zoneReq)) do
        reportingZones= reportingZones + 1
        requests= requests + zoneReq
        
        // Store request if point exists and isn't connected to BMS trend
        writePt: if (reqPtTags==null) null
                 else (reqPtTags + " and equipRef==@" + rec->equipRef)
                      .parseFilter()
                      .read(false)

        if (writePt!=null and jobIsRunning())
          hisWrite({ts:now(), val:zoneReq.as(1)}, writePt)

        // Determine if request should be ignored
        if (ignoresEn and zoneReqIgnoreFunc!=null) do
          ignore: zoneReqIgnoreFunc(rec->spaceRef, // zoneRef
                                    30min,         // reqTime, not used here
                                    24h,           // disqualTime
                                    zoneReq)       // reqInput
          if (isNumber(ignore))
            ignores= ignores + ignore
        end
      end
    end
  end)

  return {requests:        requests,
          reportingZones:  reportingZones,
          ignores:         ignores}
end

/*------------------------------------------------------------------------------
  Updates
  2022-11-11   Removed recursive search for request history point.
  2022-01-21   Added tags for requests points and ignore functions for heating
               and pressure requests, previously only programmed for cooling.
  2020-05-12   Added timers. Restricted toolRecursiveSearch to equipRef and
               equip nodes, and a depth of 1.
  2020-03-02   Increased disqualification-from-spark time from 8h to 24h to 
               properly catch scheduled zones with leaky reheat valves.
  2020-02-28   Added storage of zone request values, and processing of zone
               request ignores, added ignoresEn input.
------------------------------------------------------------------------------*/
