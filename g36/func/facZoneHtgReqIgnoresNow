/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a given zone calculate if and how many heating requests should be ignored 
  by the AHU now based on recent data (~15min) and recent sparks (~5h).
  
  Arguments: 
  zoneRef      Id of a zone equip
  reqTime      Time, duration a zone request is valid
  disqualTime  Time, duration a spark disqualifies the zone requests
------------------------------------------------------------------------------*/
(zoneRef, reqTime: 30min, disqualTime: 24h) => do
  // Normalization
  zoneId: if (isRef(zoneRef)) zoneRef else zoneRef->id
  zone: readById(zoneId)
  
  // List of disqualifying spark rules:
  // - reheat valve open & low DAT
  // - supply airflow setpoint not met
  // - zone heating setpoint too high
  disqualSparks: readAll(sparkRule and ruleFunc and suppressHtgReq)

  // Find heating requests, any type except water
  reqPt: read(heat and request and cmd and not water
              and spaceRef==zoneId,
              false)

  // Find optional zone-level ignores point to store results history
  writePt: read(general and heat and ignore and cmd 
                and spaceRef==zoneId,
                false)

  // Exit with zero if no heating request
  if (reqPt==null) return 0
  
  // Load history of heating requests
  req: reqPt.hisRead(now()-reqTime..now(), {limit:null})
  // Clip if not COV
  if (reqPt["hisMode"]!="cov")
    req= req.hisClip
  
  // Only keep last valid reading
  curReq: if (isEmpty(req)) 0
          else try req= req.colToList("v0").fold(foldLastSample)
               catch 0

  // If current request is 0, do not load rules
  if (curReq > 0) do
    // Load sparks
    ruHis: ruleSparks(
      readAll(equip and supply and airTerminalUnit and spaceRef==zoneId)
      .addRow(zone),
      now()-disqualTime..now(),
      disqualSparks)
    .ruleSparkHis()
  
    // Combine periods
    disqualPeriods: hisPeriodUnion(
      // List of columns other than ts
      ruHis.colNames.remove(0)
      // Map from list creates a list, here a list of sub-grids
      .map(colN => ruHis.keepCols(["ts", colN])
                        .findAll(row => row[colN] != null)))
    // Extend period by disqualTime
    .hisPeriodShift(0min, disqualTime)
  end else disqualPeriods: null

  // Check overlap between disqualifying conditions and last request (now)
  ignoreReq: if (curReq==0) 0
             else if (hisInWindows(now(), disqualPeriods)) curReq
             else 0

  // Store terminal unit level value if corresponding point exists and this 
  // runs as a job
  if (writePt!=null and jobIsRunning())
    hisWrite({ts:now(), val:ignoreReq}, writePt)
  
  // Return value to main function
  return ignoreReq
end

/*------------------------------------------------------------------------------
  Updates
  2020-03-30  Raphael Vitti
    Added copyright and license information.
  2020-05-12  Raphael Vitti
    Replaced toolRecursiveSearch occurences with more targeted read
    operations, in order to increase speed.
  2020-08-28  Raphael Vitti
    Moved hisRead of requests up, and return 0 if most recent request is 0,
    in order to skip processing sparks for most terminal units. Using
    foldLastSample. Consolidated hisWrite.
------------------------------------------------------------------------------*/
