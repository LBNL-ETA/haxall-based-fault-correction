/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  Determine what setpoints to push to BMS, and call dedicated function.
  
  Arguments: 
  sel          id of selected "referenceZoneTemps" record
------------------------------------------------------------------------------*/

(sel) => do
  // Normalize action input to obtain id of "referenceZoneTemps" record
  rec: readById(actionNormInput(sel, "id"))

  // Build dict of current and reference setpoints
  sps: viZoneTempSetpoints(rec->equipRef)
  
  // Load equip record for target terminal unit
  equip: readById(rec->equipRef)
  
  // For each setpoint, determine if reference setpoint will to be pushed
  occHtgSp: if (sps->curOccHtg!=sps->refOccHtg) sps->refOccHtg else null
  occClgSp: if (sps->curOccClg!=sps->refOccClg) sps->refOccClg else null
  unoccHtgSp: if (sps->curUnoccHtg!=sps->refUnoccHtg) sps->refUnoccHtg else null
  unoccClgSp: if (sps->curUnoccClg!=sps->refUnoccClg) sps->refUnoccClg else null
  
  // Identify specific write function, which is expected to have specific inputs
  // (equipRef, occHtgSp, occClgSp, unoccHtgSp, unoccClgSp)
  args: [rec->equipRef, occHtgSp, occClgSp, unoccHtgSp, unoccClgSp]
        .concat(",")
  eval(equip->generalizedSpWriteFunc + "(@" + args + ")")
end
