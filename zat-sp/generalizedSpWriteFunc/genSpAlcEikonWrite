/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  From provided generalized temperature setpoint inputs, convert to controller
  inputs (not needed for ALC / Eikon), then write required values to the
  appropriate controller inputs.

  Generalized inputs, excluding occupant adjustments and demand controls:
  These points have fixed values over long periods of time, and they do not 
  reflect occupant adjustments at the thermostats.
  - Occupied Heating Setpoint
  - Occupied Cooling Setpoint
  - Unoccupied Heating Setpoint
  - Unoccupied Cooling Setpoint

  Arguments:
  equipRef     Id of selected terminal unit
  occHtgSp     Desired value of occupied heating setpoint
  occClgSp     Desired value of occupied cooling setpoint
  unoccHtgSp   Desired value of unoccupied heating setpoint
  unoccClgSp   Desired value of unoccupied cooling setpoint
------------------------------------------------------------------------------*/

(equipRef, occHtgSp:null, occClgSp:null, unoccHtgSp:null, unoccClgSp:null) => do
  // Normalize input to id
  equipRef= try if(isRef(equipRef)) equipRef else equipRef->id
           catch throw "Input equipRef must be an id or record"
  
  // For ALC / Eikon, controller inputs are the generalizated inputs
  // Retrieve generalized temperature setpoint points directly, by tags
  occHtgPt: read(zone and air and temp and occ and heating and sp
                 and (equipRef==equipRef or equipRef->equipRef==equipRef))
  occClgPt: read(zone and air and temp and occ and cooling and sp
                 and (equipRef==equipRef or equipRef->equipRef==equipRef))
  unoccHtgPt: read(zone and air and temp and unocc and heating and sp
                   and (equipRef==equipRef or equipRef->equipRef==equipRef))
  unoccClgPt: read(zone and air and temp and unocc and cooling and sp
                   and (equipRef==equipRef or equipRef->equipRef==equipRef))
  
  // Check points are writable
  if (isNumber(occHtgSp) and occHtgPt.missing("writable"))
    throw occHtgPt.dis() + " is not writable"
  if (isNumber(occClgSp) and occClgPt.missing("writable"))
    throw occClgPt.dis() + " is not writable"
  if (isNumber(unoccHtgSp) and unoccHtgPt.missing("writable"))
    throw unoccHtgPt.dis() + " is not writable"
  if (isNumber(unoccClgSp) and unoccClgPt.missing("writable"))
    throw unoccClgPt.dis() + " is not writable"
  
  // Write to controller inputs
  if (isNumber(occHtgSp))
    pointWrite(occHtgPt, occHtgSp, 16, "genSpAlcEikonWrite")
  if (isNumber(occClgSp))
    pointWrite(occClgPt, occClgSp, 16, "genSpAlcEikonWrite")
  if (isNumber(unoccHtgSp))
    pointWrite(unoccHtgPt, unoccHtgSp, 16, "genSpAlcEikonWrite")
  if (isNumber(unoccClgSp))
    pointWrite(unoccClgPt, unoccClgSp, 16, "genSpAlcEikonWrite")
end
