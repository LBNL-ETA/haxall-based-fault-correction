/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  Main, persistent task that regularly attempts to launch tests on registered
  PID loops with autoTest=true.
  
  Arguments:
  N/A
------------------------------------------------------------------------------*/

() => do
  // Parameters
  testMinInterval: 24h
  testTaskFreq: 5min
  testMaxStandbyDuration: 1wk

  // Cleanup of test records for incomplete tests related to any PID loops
  readAll(pidLoopTest and created and maxStandbyDuration
          and not success and not failure)
  // If test is incomplete (not success, not failure), check if it is expired
  .findAll(r => now() > (r->created + r->maxStandbyDuration))
  // If it is expired, fail the test
  .each rec => commit(diff(rec, {failure: "maxStandbyDuration",
                                 endDateTime:now()}))

  // Cleanup of transient tasks related to any PID loops
  readAll(task and pidLoopRef and pidLoopTestRef)
  // Check the PID loop test related to the task
  .findAll(r => do
    test: try readById(r->pidLoopTestRef) catch null
    (test==null or test.has("trash")
     or test.has("success") or test.has("failure"))
  end)
  // If a test is trashed or complete, trash the transient task
  .each rec => commit(diff(rec, {disabled, trash}))

  // Cycle through PID loop records and run auto-testing if appropriate
  readAll(pidLoop and autoTest==true)
  .each r =>
    try do
      // Decide on test settings. If settings tags are present in the pidLoop
      // record, use as is. Else if Process Variable is a zone temp, use
      // specific values. Else use standard values.
      pv: readById(r->processVariableRef)
      // Signal to noise ratio threshold
      minSignalNoiseRatio:
        if (r.has("minSignalNoiseRatio")) r->minSignalNoiseRatio
        else if (pv.has("zone") and pv.has("temp")) 3
        else 5
      // Maximum duration of tests, used for time overrides also
      testMaxActiveDuration:
        if (r.has("testMaxActiveDuration")) r->testMaxActiveDuration
        else if (pv.has("zone") and pv.has("temp")) 3hr
        else 1hr
      // Step change
      cmdStep:
        if (r.has("cmdStep")) r->cmdStep
        else if (pv.has("zone") and pv.has("temp")) 60%
        else 30%
      
      // Attempt to launch test
      msg: facPIDAutoTestLaunch(r,
                                testMinInterval,
                                testTaskFreq,
                                testMaxStandbyDuration,
                                testMaxActiveDuration,
                                minSignalNoiseRatio,
                                cmdStep)
      // Modify PID loop record with resulting message                          
      commit(diff(r, {autoTestMsg: msg}))
    end catch (ex)
      // If an exception is returned, update message and autoTest flag
      commit(diff(r, {autoTestMsg: ex->dis,
                      autoTest: ex["autoTest"]}))

  // Cycle through PID loop records with autoPush enabled
  readAll(pidLoop and autoPush and autoTest==true)
  .each r =>
    try
      // If testing sequence is complete and PI parameters are writable, push
      // new parameters and remove autoPush tag from PID loop record
      facPIDAutoTestPush(r)
    catch (ex)
      // If an exception is returned, update message
      commit(diff(r, {autoTestMsg: ex->dis}))

  // Cycle through PID loop test records and create override recs as needed
  facPIDAutoTestOverrideRecords()

  // Return null on success
  return null
end

/*------------------------------------------------------------------------------
  Updates
  2021-02-08  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
