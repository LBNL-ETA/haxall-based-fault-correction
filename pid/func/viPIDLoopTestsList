/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a selected PID loop record, create a table of PID loop test records 
  formatted for display.
  
  Arguments: 
  pidLoopRef    Id of PID loop record
------------------------------------------------------------------------------*/

(pidLoopRef) => do
  // Normalization to record
  pidLoop: if (isRef(pidLoopRef)) readById(pidLoopRef) else pidLoopRef

  // Build title
  title: "Tests for " + pidLoop->controlVariableRef.refDis

  // Initialize grid
  grid: readAll(pidLoopTest and pidLoopRef==pidLoop->id)
  
  // Escape if no PID loop tests are found, to avoid grid manipulation errors
  if(isEmpty(grid)) return {dis:"None"}.toGrid()
                                       .addColMeta("dis", {dis: title})
  
  // Convert mod to Los_Angeles tz
  grid= grid
  .map(row => row.map((v,n) => if (n=="mod") v.toTimeZone("Los_Angeles")
                               else v))

  // Add link column
  grid= grid.addCol("link", row => do
    endDateTime: if (row.has("endDateTime")) row->endDateTime else now()
    try uiLink({view: "tuningParameters",
                state: {span: (row->tStable..endDateTime).toSpan(),
                        points: [pidLoop["controlVariableRef"],
                                 pidLoop["processVariableRef"]]
                                .findAll(v => v!=null)}})
    catch null
  end)

  // Add title as id column display name
  grid= grid.addColMeta("created", {dis:title})
  
  disCols: ["created","startDateTime","endDateTime",
            "expired","success","failure",
            "msg","link"]
           .findAll(v => grid.colNames.contains(v))
  
  return grid.keepCols(disCols)
             .reorderCols(disCols)
             .sortr((a,b) => a["created"] <=> b["created"])
end
/*------------------------------------------------------------------------------
  Updates
  2021-01-29  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
