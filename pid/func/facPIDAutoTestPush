/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a target, registered PID loop (pidLoop), marked with the autoPush tag,
  determine if testing sequence is complete, identify writable PI parameter
  points, and write new values to the BMS' PI parameters.
  
  Arguments:
  pidLoopRef           Id of target PID loop record
  tauMultiplier        Number, typ. between 1 and 3, for lambda tuning rules
  alcInterval          Time, interval setting in ALC applied to PID loops
------------------------------------------------------------------------------*/

(pidLoopRef, tauMultiplier:2, alcInterval:60s) => do
  // Normalization to record
  pidLoop: if (isRef(pidLoopRef)) readById(pidLoopRef) else pidLoopRef

  // Check presence of autoPush tag
  if (pidLoop.missing("autoPush")) return null

  // Target number of successful tests
  testIncrements: pidLoop->autoTestIncrements

  // Query combined test results
  results: viPIDLoopCombinedResults(pidLoop, testIncrements,
                                    tauMultiplier, alcInterval)

  // Exit if not enough results
  if (results.size <= testIncrements) return null
  
  // Combined result is top row, extract main outputs
  res: results.first
  alcKp:        res->alcKp
  alcKi:        res->alcKi
  jciPb:        res->jciPb
  jciTi:        res->jciTi
  jciIt:        res->jciIt

  // Identify writable parameter points related to PID loop's control variable
  pidConfig: read(pidConfig and equip 
                  and controlVariableRef==pidLoop->controlVariableRef,
                  false)
  if (pidConfig==null) throw "Could not identify related pidConfig equip"
  
  kp: read(proportional and gain and equipRef==pidConfig->id and writable,
           false)
  ki: read(integral and gain and equipRef==pidConfig->id and writable,
           false)
  pb: read(proportional and band and equipRef==pidConfig->id and writable,
           false)
  it: read(integral and time and equipRef==pidConfig->id and writable,
           false)
  
  if ([kp, ki, pb, it].findAll(v => v != null).isEmpty)
    throw "Could not identify wriatble parameter points in pidConfig equip"
  
  // Write to available points
  if (kp != null)
    pointWrite(kp, alcKp, 16, "facPIDAutoTestPush")
  if (ki != null)
    pointWrite(ki, alcKi, 16, "facPIDAutoTestPush")
  if (pb != null)
    pointWrite(pb, jciPb, 16, "facPIDAutoTestPush")
  if (it != null)
    pointWrite(it, jciIt, 16, "facPIDAutoTestPush")

  // Remove autoPush tag from PID loop record
  commit(diff(pidLoop, {-autoPush, autoPushedDate:today()}))
end

/*------------------------------------------------------------------------------
  Updates
  2022-04-04  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
