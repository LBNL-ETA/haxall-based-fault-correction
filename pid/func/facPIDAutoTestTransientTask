/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a target, registered PID loop test record (pidLoopTest), call the test 
  routine function to start, continue or complete a test. Collect results, and 
  update the PID loop test record.
  
  Arguments:
  msg          Dict containing
  ---- pidLoopTestRef     Id of PID loop test record (pidLoopTest)
------------------------------------------------------------------------------*/

(msg) => do
  // Extract variables
  pidLoopTestRef: msg->pidLoopTestRef

  // Normalize to record
  pidLoopTest: if (isRef(pidLoopTestRef)) readById(pidLoopTestRef)
               else pidLoopTestRef

  // Exit if test already succeeded or failed
  if (pidLoopTest.has("success") or pidLoopTest.has("failure"))
    return null

  // Related variables
  pid: readById(pidLoopTest->pidLoopRef)

  // Call test routine function, process exceptions
  try changeDict: facPIDAutoTestRoutine(pidLoopTest->id)
  catch (ex) do
    changeDict: {failure,
                 msg: "facPIDAutoTestRoutine: " + ex->dis}
  end

  // Release override
  if (changeDict.has("success")
      or changeDict.has("failure")
      or changeDict.has("reset"))
    pointAuto(pid->controlVariableRef)

  // Update PID loop test record
  if (changeDict.has("success") or changeDict.has("failure"))
    changeDict= changeDict
    .set("endDateTime", now())
    .set("stage", removeMarker())
  if (changeDict.has("success"))
    changeDict= changeDict
    .set("td", changeDict["td"])
    .set("tau", changeDict["tau"])
    .set("gp", changeDict["gp"])
  if (changeDict.has("reset"))
    changeDict= changeDict
    .set("startDateTime", removeMarker())
    .set("cmd0", removeMarker())
    .set("cmd1", removeMarker())
    .set("stage", removeMarker())
    .set("t0", removeMarker())
    .set("t1", removeMarker())
    .set("tStable", removeMarker())
    .set("reset", removeMarker())
    
  commit(diff(pidLoopTest, changeDict))
          
  // Disable transient task
  if (changeDict.has("success")
      or changeDict.has("failure"))
    try commit(diff(taskCur(), {disabled}))
    catch null
end

/*------------------------------------------------------------------------------
  Updates
  2021-02-11  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
