/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  Analyze trends from a step change for the purpose of open-loop tuning.
  
  Assume that the provided history trends only encompass the step change, from
  the time the control variable (CV) changes until the time the process
  variable (PV) stabilizes. If more data is provided, only the step change with 
  the greatest PV derivative is analyzed.
   
  Perform rollup of PV to ensure fixed sampling interval for simple derivatives,
  and to attenuate noise. Target rollup interval is:
  - 30s if PV step <= 15s
  - 1min if PV step <= 30s but > 15s
  - 2min if PV step <= 1min but > 30s
  - Function returns an error if PV step > 1min
  
  Two trends are expected: process variable and control variable. The control
  variable is the trend associated with a "cmd" point. If more than two trends
  are provided, only one PV and only one CV will be selected, and the behavior 
  is not documented. If all points have "cmd" tag, function returns an error.

  Arguments: 
  hisGrid              His grid with PV and CV data, inc. step change in CV
  tauMultiplier        Number, typ. between 1 and 3, for lambda tuning rules
  alcInterval          Time, interval setting in ALC applied to PID loops
  minSignalNoiseRatio  Number, S/N threshold above which results are valid
  hisOutput            If true, return processed history grid inc. derivative
                       If false, return analysis results
------------------------------------------------------------------------------*/

(hisGrid, tauMultiplier:2, alcInterval:60s, minSignalNoiseRatio:5,
 hisOutput:false, debug:false) => do
  
  // Determine CV and PV columns
  cvCol: hisGrid.colNames
         .find(cN => hisGrid.col(cN).meta.has("cmd"))
  pvCol: hisGrid.removeCol("ts").colNames
         .find(cN => hisGrid.col(cN).meta.missing("cmd"))
  if (cvCol==null)
    throw {
      stop,
      dis: "Could not determine what data is associated to a control variable"
    }
           
  if (pvCol==null)
    throw {
      stop,
      dis: "Could not determine what data is associated to a process variable"
    }
    
  // Isolate PV to determine trending interval (assumed fixed)
  pvHisGrid: hisGrid.keepCols(["ts",pvCol]).hisFindAll(v => v != null)
  pvHis: pvHisGrid.meta
  
  // Determine sampling step and rollup step
  pvHisGridClipped: pvHisGrid.hisClip
  pvHisGridTsList: pvHisGridClipped.colToList("ts")
  s: (pvHisGridTsList.last - pvHisGridTsList.first) / (pvHisGridClipped.size - 1)
  //s: (pvHis->hisEnd - pvHis->hisStart) / pvHisGrid.hisClip.size
  rollupStep: if (s < 15s) 30s
              else if (s <= 30s) 60s
              else if (s <= 1min) 120s
              else throw {
                     stop,
                     dis: "Sampling rate of process variable is too low "
                          + "(1 or more samples per minute required)"
                   }
  
  // Roll up with avg
  rHisGrid: hisGrid.hisRollup(avg, rollupStep)
  
  // Set colName for derivative
  dCol: "d_" + pvCol
  adCol: "d_abs_" + pvCol 
  
  // Add derivative
  vals: rHisGrid.colToList(pvCol)
  rHisGrid= rHisGrid
  .addCol(dCol, (row,i) => try (vals[i]-vals[i-1])/s catch null)
  .addColMeta(dCol, {dis: "Derivative: " + rHisGrid.col(pvCol).meta.dis()})
  .addCol(adCol, (row,i) => try abs(row[dCol]) catch null)
  .addColMeta(adCol, {dis: "Abs Derivative: " + rHisGrid.col(pvCol).meta.dis()})
  
  // Determine maximum derivative
  adMax: rHisGrid.foldCol(adCol,max)
  tMax: rHisGrid.find(r => r[adCol] == adMax)->ts
  cv1: rHisGrid.hisInterpolate().find(r => r[adCol] == adMax)[cvCol]
  
  // Find CV value closest to tMaxDerivative that is not equal to cv1
  cv0Grid: hisGrid
  .keepCols(["ts",cvCol])
  .hisFindAll(v => v != null and v != cv1)
  // Add time distance to tMaxDerivative
  .addCol("tDis", r => r->ts - tMax)
  // cv0 predates tMaxDerivative
  .findAll(r => r->ts < tMax)
  // If empty, it's likely the data does not show a step change
  if (isEmpty(cv0Grid))
    if (not(debug))
      throw {hold,
             dis: "Step change was not detected"}
    // Provide trends with derivative for debug
    if (debug)
      return rHisGrid
             .addCol("t", r => adMax / 10)
             .addColMeta("t", {dis: "Stabilization Threshold"})
             .addCol("s", r => adMax / minSignalNoiseRatio)
             .addColMeta("s", {dis: "SNR Threshold"})
  // Determine last time at cv0, at min distance (max negative tDis)
  cv0Row: cv0Grid.find(r => r->tDis == cv0Grid.foldCol("tDis", max))
  tLast0: cv0Row->ts
  cv0: cv0Row[cvCol]
  
  // Determine derivative threshold for signal values before and after impulse
  adThresh: adMax / 10
  // Find values closest to tMaxDerivative when derivative is below threshold
  lowDerivativeGrid: rHisGrid
  .hisFindAll(v => v!=null)
  // Apply threshold
  .findAll(r => r[adCol] < adThresh)
  // Add time-based distance to max derivative
  .addCol("tDis", r => r->ts - tMax)
  // Times before and after peak derivative when values were more stable
  tDis0: lowDerivativeGrid.findAll(r => r["tDis"] < 0).foldCol("tDis", max)
  tDis1: lowDerivativeGrid.findAll(r => r["tDis"] > 0).foldCol("tDis", min)
  try do
    t0: lowDerivativeGrid.find(r => r["tDis"]==tDis0)["ts"]
    t1: lowDerivativeGrid.find(r => r["tDis"]==tDis1)["ts"]
  end catch
    throw {
      hold,
      dis: "Not enough data before or after step change to show stabilization "
           + "of process variable"
    }
  // If CV at t1 is not cv1, throw error
  if (hisJoin([hisGrid,rHisGrid])
      .hisInterpolate
      .find(r => r->ts==t1)[cvCol] != cv1)
    throw {
      hold,
      dis: "Step duration was too short, or provided data does not show "
           + "a clear step",
      t1: t1,
      cvt1: hisJoin([hisGrid,rHisGrid]).hisInterpolate.find(r => r->ts==t1)[cvCol]
    }
  // Pick corresponding values
  k0: lowDerivativeGrid.find(r => r["tDis"]==tDis0)[pvCol]
  k1: lowDerivativeGrid.find(r => r["tDis"]==tDis1)[pvCol]
  // Calculate process characteristics
  tau: (t1 - t0).to("s")
  td: max(0, t0 - tLast0).to("s")
  km: k1-k0
  gp: (km)/abs(cv1-cv0)
  
  // Apply tuning rules
  // Kc = tau/(gp x (taucl + td))
  // Ti = tau
  kc: (tau / (gp * (tauMultiplier * tau + td))).as(1)
  ti: tau.to("s")
  
  // Join grids
  hisGrid= hisJoin([rHisGrid.removeCols([pvCol,cvCol]), hisGrid]) 
  
  // Check signal to noise ratio >= 5, remove all provided data after 2*tau+td
  // of a step change, only check values when cv is at cv0 or cv1
  periods0: hisGrid.keepCols(["ts",cvCol])
                   .hisFindAll(v => v!=null)
                   .hisFindPeriods((val, ts, his) => val==cv0)
                   .hisPeriodShift(2*tau+td, 0s)
  periods1: hisGrid.keepCols(["ts",cvCol])
                   .hisFindAll(v => v!=null)
                   .hisFindPeriods((val, ts, his) => val==cv1)
                   .hisPeriodShift(2*tau+td, 0s)       
  noisePeriods: hisPeriodUnion([periods0,periods1])
  try do
    // Remove zero derivatives in order to reject tests with insufficient
    // PV data resolution
    noiseHisGrid: hisGrid
    .hisFindInPeriods(noisePeriods)
    .findAll(r => r[adCol] != 0)
    
    if (noiseHisGrid.size < 5) throw "More samples required"
    snRatio: adMax / noiseHisGrid.foldCol(adCol, max)
  end catch throw {
          hold,
          dis: "Not enough data before or after step change to determine signal "
               + "to noise ratio"
        }
  if (snRatio < minSignalNoiseRatio)
    throw {
      hold,
      dis: "Detected signal to noise < " + minSignalNoiseRatio
           + " (" + snRatio.as(1).format("#.0" ) 
           + "), try to increase cmd step"
    }
 
  // Filter out data not related to analyzed step change
  period0: hisGrid.keepCols(["ts",cvCol])
                  .hisFindAll(v => v!=null)
                  .hisFindPeriods((val, ts, his) => val==cv0)
                  .find(r => hisInWindows(tLast0,r.toGrid))
  period1: hisGrid.keepCols(["ts",cvCol])
                  .hisFindAll(v => v!=null)
                  .hisFindPeriods((val, ts, his) => val==cv1)
                  .find(r => hisInWindows(tMax,r.toGrid))
  periodStep: period0.toGrid.addRow(period1)
  try hisGrid= hisGrid.hisFindInPeriods(periodStep)
  catch throw {hold,
               dis: "periodStep issue"}

  // Throw error if time at each fixed CV during analyzed step is less
  // than tau / 2 (cv0) or tau (cv1)
  if (period0[cvCol] < (tau / 2))
    throw {
      stop,
      dis: "Time at fixed cmd of " + cv0.format("#.0") + " was too short before"
           + " analyzed step (" + period0[cvCol].to("s").format("#.")
           + " < " + (tau / 2).to("s").format("#.")
    }
  if (period1[cvCol] < tau)
    throw {
      hold,
      dis: "Time at fixed cmd of " + cv1.format("#.0") + " was too short during"
           + " analyzed step (" + period1[cvCol].to("s").format("#.")
           + " < " + tau.to("s").format("#.")
    }

  // Conversion to ALC PID gains, parallel algorithm
  alcKp: (tau / (abs(gp) * (tauMultiplier * tau + td))).as(1)
  alcKi: (alcInterval.to("s") / (abs(gp) * (tauMultiplier * tau + td))).as(1)
  hisGrid= hisGrid.addMeta(
    {alcKp:alcKp, alcKi:alcKi, alcInterval:alcInterval})  

  // Conversion to JCI PID parameters
  jciPb: ((-100% * gp * (tauMultiplier * tau + td)) / tau).as(1)
  jciTi: (1 / tau.to("min")).as(1)  // DX9100
  jciIt: (tau / 1.5s).as(1)         // UNT
  hisGrid= hisGrid.addMeta(
    {jciPb:jciPb, jciTi:jciTi, jciIt:jciIt})  

  // Compile analysis output
  anDict: {maxDerivative:adMax,
           tMaxDerivative:tMax,
           cv1:cv1,
           cv0:cv0,
           t0: t0,
           tLast0:tLast0,
           td:td, 
           km:km,
           tResponse:t0, 
           tStable1:t1, 
           gp:gp, 
           tau:tau,
           kc:kc, 
           ti:ti,
           snRatio:snRatio.as(1),
           alcKp:alcKp, 
           alcKi:alcKi, 
           alcInterval:alcInterval,
           jciPb:jciPb, 
           jciTi:jciTi, 
           jciIt:jciIt}
  anGrid: anDict.toGrid()
  
  // Add display names
  anGrid= anGrid
  .addColMeta("maxDerivative", {dis:"Maximum PV derivative"})
  .addColMeta("tMaxDerivative", {dis:"Time of max PV derivative"})
  .addColMeta("cv1", {dis:"CV step"})
  .addColMeta("cv0", {dis:"CV before"})
  .addColMeta("tLast0", {dis:"Last time before step"})
  .addColMeta("td", {dis:"Dead time"})
  .addColMeta("km", {dis:"PV reaction step"})
  .addColMeta("tResponse", {dis:"Time PV response starts"})
  .addColMeta("tStable1", {dis:"Time PV response stabilizes"})
  .addColMeta("gp", {dis:"Absolute process gain"})
  .addColMeta("tau", {dis:"Process time constant"})
  .addColMeta("kc", {dis:"Kc: controller gain"})
  .addColMeta("ti", {dis:"Ti: integral time"})
  .addColMeta("snRatio", {dis:"Signal to noise ratio"})
  .addColMeta("alcKp", {dis:"ALC Kp: proportional gain"})
  .addColMeta("alcKi", {dis:"ALC Ki: integral gain"})
  .addColMeta("alcInterval", {dis:"ALC interval"})
  .addColMeta("jciPb", {dis:"JCI PB: proportional band"})
  .addColMeta("jciTi", {dis:"JCI TI: reset action (DX9100)"})
  .addColMeta("jciIt", {dis:"JCI IT: integral time (VMA / UNT)"})

  if (hisOutput)
    return hisGrid
  else
    return anGrid
end

/*------------------------------------------------------------------------------
  Updates
  2022-04-22  Raphael Vitti
    Modified S/N ratio calculation to remove derivative values that are exactly
    zero, in order to reject tests when PV resolution is too low.
    Modified S/N ratio calculation minimum number of samples threshold 
    from 10 to 5.
  2022-04-08  Raphael Vitti
    Modified tuning equations for ALC & JCI
  2021-03-05  Raphael Vitti
    Added hisInterpolate to grid when determining value of CV at max derivative,
    in case CV and PV have different trending intervals.
  2021-02-09  Raphael Vitti
    Added hold or stop tags to all exceptions, for auto-testing routine to take
    appropriate action during testing.
  2021-01-21  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
