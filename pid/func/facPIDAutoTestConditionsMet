/*------------------------------------------------------------------------------
  Haxall-based (Axon) fault auto-correction package for building HVAC
  system (Haxall-based Fault Correction) Copyright (c) 2022, The
  Regents of the University of California, through Lawrence Berkeley
  National Laboratory (subject to receipt of any required approvals
  from the U.S. Dept. of Energy) and kW Engineering. All rights reserved.

  If you have questions about your rights to use or distribute this software,
  please contact Berkeley Lab's Intellectual Property Office at
  IPO@lbl.gov.

  NOTICE.  This Software was developed under funding from the U.S. Department
  of Energy and the U.S. Government consequently retains certain rights.  As
  such, the U.S. Government has been granted for itself and others acting on
  its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
  Software to reproduce, distribute copies to the public, prepare derivative 
  works, and perform publicly and display publicly, and to permit others to do
  so.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  For a target, registered PID loop (pidLoop), and a target span, return true
  if testing is OK during the span. Raise an exception otherwise. Target span 
  cannot be in the future, because implementation makes use of observed data.
  
  Implemented conditions:
  - No testing in the morning (4 - 10), so as not to interfere with warmup
  - Control variable can't be maxed out before the test
  - Reheat valve testing requires terminal unit supply airflow
  - Tests on other types of control variables always return false
  
  Arguments:
  pidLoopRef      Id of PID loop record
  span            Span to review
------------------------------------------------------------------------------*/

(pidLoopRef, span) => do
  // Normalize to record
  pidLoop: if (isRef(pidLoopRef)) readById(pidLoopRef)
               else pidLoopRef
  
  // Retrieve PID loop variables
  pv: readById(pidLoop->processVariableRef)
  cv: readById(pidLoop->controlVariableRef)
  
  // Retrieve equip of the control variable
  eq: readById(cv->equipRef)
  
  // Load trends
  cvHis: cv.hisRead(span, {-limit})

  /*----------------------------------------------------------------------------
  // Catch non-implemented control variable types
  ----------------------------------------------------------------------------*/
  cvAllowedList: ["heat and valve and cmd and equipRef->airTerminalUnit"]
  match: cvAllowedList.find(
    filterStr => (filterToFunc(parseFilter(filterStr)))(cv))
  if (match==null)
    throw {stop,
           dis: "Control variable type not implemented"}
  
  /*----------------------------------------------------------------------------
  // Schedule
  ----------------------------------------------------------------------------*/
  // No testing between 4 AM and 10 AM every day
  restrictedPeriod: cvHis.hisFindPeriods(
    (val,ts,his) => ts.time >= time(4,0,0) and ts.time < time(10,0,0))
  if (not(isEmpty(restrictedPeriod)))
    throw {hold,
           dis: "Testing span overlaps a restricted period"}
           
  /*----------------------------------------------------------------------------
  // Check that the control variable isn't maxed out
  ----------------------------------------------------------------------------*/ 
  // Determine recent average command
  avgCmd: cv.hisRead(span)
            .foldCol("v0", avg)
            
  // If this average exceeds 99%, postpone test
  if (avgCmd > 99%)
    throw {hold,
           dis: "Control variable > 99% (" + avgCmd.format("0.#")
                + "%) in recent " + (span.end - span.start).to("min")}

  /*----------------------------------------------------------------------------
  // Control variables at a terminal unit require some supply airflow
  ----------------------------------------------------------------------------*/
  if (eq.has("airTerminalUnit")) do
    // Identify airflow point
    af: read(air and flow and sensor and equipRef==eq->id,false)
    if (af==null)
      throw {stop,
             dis: "Could not identify supply airflow related to " + cv.dis()}
  
    // Calculate max observed airflow, over max 50,000 samples over past year
    maxObservedAf: af.hisRead(pastYear, {limit:50000}).foldCol("v0",max)
  
    // Check for supply airflow > 10% of observed max
    afThreshold: maxObservedAf * 0.1
    noAirflowPeriod: af.hisRead(span, {-limit}).hisFindPeriods(
      (val,ts,his) => val < afThreshold)
    if (not(isEmpty(noAirflowPeriod)))
      throw {hold,
             dis: "Testing span overlaps a period with no airflow"}
  end

  /*----------------------------------------------------------------------------
  // Heat valves require heating hot water flow at the plant
  ----------------------------------------------------------------------------*/
  if (cv.has("heat") and cv.has("valve")) do
    // Identify hot water plant flow
    hhwPlantId: eq["hotWaterPlantRef"]
    if (hhwPlantId==null)
      throw {stop,
             dis: "Could not identify HHW plant related to " + cv.dis()}
    hwf: read(flow and sensor and
              (equipRef==hhwPlantId or equipRef->equipRef==hhwPlantId), false)
    if (hwf==null)
      throw {stop,
             dis: "Could not identify HHW flow related to " + cv.dis()}
  
    // Calculate max observed HHW flow, over max 50,000 samples over past year
    maxObservedHwf: hwf.hisRead(pastYear, {limit:50000}).foldCol("v0",max)

    // Check for HHW airflow > 10% of observed max
    hwfThreshold: maxObservedHwf * 0.1
    noFlowPeriod: hwf.hisRead(span, {-limit}).hisFindPeriods(
      (val,ts,his) => val < hwfThreshold)
    if (not(isEmpty(noFlowPeriod)))
      throw {hold,
             dis: "Testing span overlaps a period with no HHW flow"}
  end
  
  return true
end

/*------------------------------------------------------------------------------
  Updates
  2022-05-06  Raphael Vitti
    Added heating hot water flow test.
  2021-02-07  Raphael Vitti
    Created.
------------------------------------------------------------------------------*/
